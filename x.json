{
  "name": "github",
  "description": "Github for Chiχ",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/github.git"
  },
  "dependencies": {
    "es6-template-strings": "^2.0.1",
    "github-api": "^0.11.2",
    "mustache": "^2.3.0",
    "qs": "^6.5.2",
    "superagent": "^3.8.3"
  },
  "nodes": [
    {
      "name": "api",
      "ns": "github",
      "description": "Github API",
      "phrases": {
        "active": "Authenticating with github api"
      },
      "ports": {
        "input": {
          "oauth_token": {
            "title": "OAUTH Token",
            "type": "string"
          }
        },
        "output": {
          "github": {
            "title": "Github",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "github-api": "0.x.x"
        }
      },
      "fn": "output = {\n  github: $.create(new github_api({token: $.oauth_token}))\n}\n"
    },
    {
      "name": "contents",
      "ns": "github",
      "description": "Get contents at a particular path",
      "phrases": {
        "active": "Reading contents of{{input.path}}"
      },
      "ports": {
        "input": {
          "repo": {
            "title": "Repository",
            "type": "function"
          },
          "branch": {
            "title": "Branch",
            "type": "string"
          },
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "contents": {
            "title": "Contents",
            "type": "string"
          }
        }
      },
      "fn": "output = [$.repo, 'contents', $.branch, $.path]\n"
    },
    {
      "name": "createRepo",
      "ns": "github",
      "async": true,
      "description": "Create Repository",
      "phrases": {
        "active": "Creating repository {{input.name}}"
      },
      "ports": {
        "input": {
          "github": {
            "title": "Github",
            "async": true,
            "type": "function"
          },
          "name": {
            "title": "The name of the repository",
            "type": "string"
          },
          "options": {
            "type": "object",
            "title": "Options",
            "properties": {
              "description": {
                "title": "Description",
                "type": "string",
                "description": "A short description of the repository",
                "required": false
              },
              "homepage": {
                "title": "Homepage",
                "type": "string",
                "description": "URL with more information about the repository",
                "required": false
              },
              "auto_init": {
                "title": "Auto Init",
                "type": "boolean",
                "description": "Pass true to create an initial commit with empty README.",
                "default": false
              },
              "license_template": {
                "title": "License",
                "description": "Desired LICENSE template to apply.",
                "type": "string",
                "enum": [
                  "apache",
                  "affero",
                  "artistic",
                  "gpl",
                  "lgpl",
                  "mit",
                  "mozilla"
                ],
                "default": "mit"
              },
              "private": {
                "title": "Private",
                "type": "boolean",
                "description": "Either true to create a private repository, or false to create a public one. Creating private repositories requires a paid GitHub account.",
                "default": false
              },
              "has_issues": {
                "title": "Issues",
                "type": "boolean",
                "description": "Either true to enable issues for this repository, false to disable them.",
                "default": true
              },
              "has_wiki": {
                "title": "Wiki",
                "type": "boolean",
                "description": "Either true to enable the wiki for this repository, false to disable it.",
                "default": true
              },
              "has_downloads": {
                "title": "Downloads",
                "type": "boolean",
                "description": "Either true to enable downloads for this repository, false to disable them.",
                "default": true
              },
              "team_id": {
                "title": "Team",
                "type": "number",
                "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
                "required": false
              },
              "gitignore_template": {
                "title": "Auto Init",
                "type": "string",
                "description": "Desired language or platform .gitignore template to apply. Use the name of the template without the extension. For example, “Haskell”. Ignored if the auto_init parameter is not provided.",
                "required": false
              }
            }
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "out": {
            "title": "Result",
            "type": "object"
          }
        }
      },
      "fn": "on.input.github = function() {\n  var repo = $.github.getRepo($.user, $.name);\n  $.options.name = $.name;\n  repo.createRepo($.options, function(err, result) {\n    if(err) {\n      output({ error: $.create(err) });\n    } else {\n      output({ out: $.create(result) });\n    }\n  });\n};\n"
    },
    {
      "name": "deleteRepo",
      "ns": "github",
      "description": "Delete Repository",
      "phrases": {
        "active": "Removing repository"
      },
      "ports": {
        "input": {
          "repo": {
            "title": "Repository",
            "type": "function"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          }
        }
      },
      "fn": "on.input.repo = function() {\n  $.repo.deleteRepo(function(err) {\n    if(err) {\n      output({ error: $.create(err)});\n    }\n  });\n}\n"
    },
    {
      "name": "getRepo",
      "ns": "github",
      "description": "Get Repository",
      "phrases": {
        "active": "getting repository {{input.reponame}}"
      },
      "async": true,
      "ports": {
        "input": {
          "github": {
            "title": "Github",
            "type": "function",
            "async": true
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "reponame": {
            "title": "Repository name",
            "type": "string"
          }
        },
        "output": {
          "repo": {
            "title": "Repository",
            "type": "function"
          }
        }
      },
      "fn": "on.input.github = function() {\n  output({\n    repo: $.create($.github.getRepo($.username, $.reponame))\n  })\n}\n"
    },
    {
      "name": "getSha",
      "ns": "github",
      "description": "Retrieve Sha for file",
      "phrases": {
        "active": "retrieving Sha for path {{input.path}}"
      },
      "ports": {
        "input": {
          "repo": {
            "title": "Repository",
            "type": "function",
            "readonly": true
          },
          "branch": {
            "title": "Branch",
            "type": "string"
          },
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "sha": {
            "title": "Sha",
            "type": "string"
          }
        }
      },
      "fn": "output = [$.repo, 'getSha', $.branch, $.path]\n"
    },
    {
      "name": "getTree",
      "ns": "github",
      "description": "Retrieve repo tree",
      "phrases": {
        "active": "retrieving {{input.branch}} tree"
      },
      "ports": {
        "input": {
          "repo": {
            "title": "Repository",
            "type": "function"
          },
          "branch": {
            "title": "Branch",
            "type": "string",
            "default": "master"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "tree": {
            "title": "Tree",
            "type": "object"
          }
        }
      },
      "fn": "output = [$.repo, 'getTree', $.branch]\n"
    },
    {
      "name": "login",
      "ns": "github",
      "description": "Github Login",
      "phrases": {
        "active": "Logging into Github"
      },
      "ports": {
        "input": {
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string",
            "format": "password"
          }
        },
        "output": {
          "github": {
            "title": "Github",
            "type": "function"
          }
        }
      },
      "dependencies": {
        "npm": {
          "github-api": "0.x.x"
        }
      },
      "fn": "output = {\n  github: $.create(new github_api({username: $.username, password: $.password}))\n}\n"
    },
    {
      "name": "read",
      "ns": "github",
      "async": true,
      "description": "Read path",
      "phrases": {
        "active": "Reading {{input.path}} from the {{input.branch}} branch"
      },
      "ports": {
        "input": {
          "repo": {
            "title": "Repository",
            "type": "function"
          },
          "branch": {
            "title": "Branch",
            "type": "string",
            "default": "master"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "async": true
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "content": {
            "title": "Content",
            "type": "object"
          },
          "sha": {
            "title": "SHA",
            "type": "object"
          }
        }
      },
      "fn": "on.input.path = function() {\n  $.repo.read(\n    $.branch,\n    $.path,\n    function(err, content, sha) {\n      if(err) {\n        output({ error: $.create(err) });\n      } else {\n        output({\n          content: $.create(content),\n          sha: $.create(sha)\n        });\n      }\n    }\n  );\n};\n"
    },
    {
      "name": "show",
      "ns": "github",
      "description": "Show Repository",
      "phrases": {
        "active": "Reading {{input.path}} from the {{input.branch}} branch"
      },
      "ports": {
        "input": {
          "repo": {
            "title": "Repository",
            "type": "function"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "repo": {
            "title": "Repository",
            "type": "function"
          }
        }
      },
      "fn": "output = [$.repo, 'show']\n"
    },
    {
      "name": "write",
      "ns": "github",
      "description": "Write File",
      "phrases": {
        "active": "Writing {{input.path}} to the {{input.branch}} branch. [{{input.commit_message}}]"
      },
      "ports": {
        "input": {
          "repo": {
            "title": "Repository",
            "type": "function"
          },
          "branch": {
            "title": "Branch",
            "type": "string",
            "default": "master"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "contents": {
            "title": "Contents",
            "type": "string"
          },
          "commit_message": {
            "title": "Commit message",
            "type": "string"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          }
        }
      },
      "fn": "output = [$.repo, 'write', $.branch, $.path, $.contents, $.commit_message]\n"
    },
    {
      "type": "flow",
      "nodes": [
        {
          "id": "GetJsonRequest",
          "title": "GetJsonRequest",
          "ns": "superagent",
          "name": "getJsonRequest"
        },
        {
          "id": "Qs",
          "title": "Qs",
          "ns": "qs",
          "name": "stringify"
        },
        {
          "id": "Log",
          "title": "Log",
          "ns": "console",
          "name": "log"
        },
        {
          "id": "UrlTpl",
          "title": "UrlTpl",
          "ns": "template",
          "name": "string"
        },
        {
          "id": "Mustache",
          "title": "Mustache",
          "ns": "template",
          "name": "mustache"
        }
      ],
      "links": [
        {
          "source": {
            "id": "Qs",
            "port": "out"
          },
          "target": {
            "id": "UrlTpl",
            "port": "in",
            "setting": {
              "index": "query"
            }
          },
          "metadata": {
            "title": "Qs out -> in UrlTpl"
          }
        },
        {
          "source": {
            "id": "UrlTpl",
            "port": "out"
          },
          "target": {
            "id": "GetJsonRequest",
            "port": "url"
          },
          "metadata": {
            "title": "UrlTpl out -> url GetJsonRequest"
          }
        },
        {
          "source": {
            "id": "GetJsonRequest",
            "port": "out"
          },
          "target": {
            "id": "Mustache",
            "port": "vars",
            "setting": {
              "index": "jobs"
            }
          },
          "metadata": {
            "title": "GetJsonRequest out -> vars Mustache"
          }
        }
      ],
      "title": "Search Github Jobs",
      "description": "Search the Github jobs api.",
      "providers": {
        "@": {
          "url": "https://api.chix.io/v1/nodes/rhalff/{ns}/{name}"
        }
      },
      "ports": {
        "input": {
          "in": {
            "nodeId": "Qs",
            "title": "In",
            "name": "in"
          }
        },
        "output": {
          "out": {
            "nodeId": "Mustache",
            "title": "Out",
            "name": "out"
          }
        }
      },
      "ns": "github",
      "name": "jobs"
    }
  ]
}