{
  "name": "github",
  "description": "Github for Chiχ",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/github.git"
  },
  "dependencies": {
    "github-api": "0.x.x"
  },
  "nodes": [
    {
      "ports": {
        "input": {
          "oauth_token": {
            "title": "OAUTH Token",
            "type": "string"
          }
        },
        "output": {
          "github": {
            "title": "Github",
            "type": "object"
          }
        }
      },
      "require": {
        "github-api": "0.x.x"
      },
      "phrases": {
        "active": "Authenticating with github api"
      },
      "description": "Github API",
      "ns": "github",
      "name": "api",
      "fn": "output = {\n  github: new github_api({\n    token: input.oauth_token\n  })\n}\n"
    },
    {
      "ports": {
        "input": {
          "repo": {
            "title": "Repository",
            "type": "function"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "ref": {
            "title": "Ref",
            "type": "string"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "contents": {
            "title": "Contents",
            "type": "string"
          }
        }
      },
      "phrases": {
        "active": "Reading contents of{{input.path}}"
      },
      "description": "Get contents at a particular path",
      "ns": "github",
      "name": "contents",
      "fn": "output = [input.repo, 'contents', input.ref, input.path]\n"
    },
    {
      "ports": {
        "input": {
          "github": {
            "title": "Github",
            "type": "function"
          },
          "name": {
            "title": "The name of the repository",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A short description of the repository"
          },
          "license_template": {
            "title": "License",
            "type": "string",
            "enum": [
              "apache",
              "affero",
              "artistic",
              "gpl",
              "lgpl",
              "mit",
              "mozilla"
            ],
            "default": "mit",
            "description": "Desired LICENSE template to apply."
          },
          "homepage": {
            "title": "Homepage",
            "type": "string",
            "description": "URL with more information about the repository"
          },
          "private": {
            "title": "Private",
            "type": "boolean",
            "description": "Either true to create a private repository, or false to create a public one. Creating private repositories requires a paid GitHub account.",
            "default": false
          },
          "has_issues": {
            "title": "Issues",
            "type": "boolean",
            "description": "Either true to enable issues for this repository, false to disable them.",
            "default": true
          },
          "has_wiki": {
            "title": "Wiki",
            "type": "boolean",
            "description": "Either true to enable the wiki for this repository, false to disable it.",
            "default": true
          },
          "has_downloads": {
            "title": "Downloads",
            "type": "boolean",
            "description": "Either true to enable downloads for this repository, false to disable them.",
            "default": true
          },
          "team_id": {
            "title": "Team",
            "type": "number",
            "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
            "default": null
          },
          "auto_init": {
            "title": "Auto Init",
            "type": "boolean",
            "description": "Pass true to create an initial commit with empty README.",
            "default": false
          },
          "gitignore_template": {
            "title": "Auto Init",
            "type": "string",
            "description": "Desired language or platform .gitignore template to apply. Use the name of the template without the extension. For example, “Haskell”. Ignored if the auto_init parameter is not provided.",
            "default": null
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "out": {
            "title": "Result",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Creating repository {{input.name}}"
      },
      "description": "Create Repository",
      "ns": "github",
      "name": "createRep",
      "fn": "on.input.github = function() {\n  input.github.createRepo(input, function(err, result) {\n    if(err) {\n      output({ error: err });\n    } else {\n      output({ out: result });\n    }\n  });\n};\n"
    },
    {
      "ports": {
        "input": {
          "repo": {
            "title": "Repository",
            "type": "function"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Removing repository"
      },
      "description": "Delete Repository",
      "ns": "github",
      "name": "deleteRepo",
      "fn": "on.input.repo = function() {\n  input.repo.deleteRepo(function(err) {\n    if(err) {\n      output({ error: err});\n    }\n  });\n}\n"
    },
    {
      "ports": {
        "input": {
          "repo": {
            "title": "Repository",
            "type": "function",
            "readonly": true
          },
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "sha": {
            "title": "Sha",
            "type": "string"
          }
        }
      },
      "phrases": {
        "active": "retrieving Sha for path {{input.path}}"
      },
      "description": "Retrieve Sha for file",
      "ns": "github",
      "name": "getSha",
      "fn": "output = [\n  input.repo,\n  'getSha',\n  input.path\n]\n"
    },
    {
      "ports": {
        "input": {
          "repo": {
            "title": "Repository",
            "type": "function"
          },
          "branch": {
            "title": "Branch",
            "type": "string",
            "default": "master"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "tree": {
            "title": "Tree",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "retrieving {{input.branch}} tree"
      },
      "description": "Retrieve repo tree",
      "ns": "github",
      "name": "getTree",
      "fn": "output = [\n  input.repo,\n  'getTree',\n  input.branch\n]\n"
    },
    {
      "ports": {
        "input": {
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "password"
          }
        },
        "output": {
          "github": {
            "title": "Github",
            "type": "function"
          }
        }
      },
      "require": {
        "github-api": "0.x.x"
      },
      "phrases": {
        "active": "Logging into Github"
      },
      "description": "Github Login",
      "ns": "github",
      "name": "login",
      "fn": "output = {\n  github: new github_api({\n    username: input.username,\n    password: input.password\n  })\n}\n"
    },
    {
      "ports": {
        "input": {
          "repo": {
            "title": "Repository",
            "type": "function"
          },
          "branch": {
            "title": "Branch",
            "type": "string",
            "default": "master"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "async": true
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "content": {
            "title": "Content",
            "type": "object"
          },
          "sha": {
            "title": "SHA",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Reading {{input.path}} from the {{input.branch}} branch"
      },
      "description": "Read File",
      "async": true,
      "ns": "github",
      "name": "read",
      "fn": "on.input.path = function() {\n  input.repo.read(\n    input.branch,\n    input.path,\n    function(err, content, sha) {\n      if(err) {\n        output({ error: err });\n      } else {\n        output({\n          content: content,\n          sha: sha\n        });\n      }\n    }\n  );\n};\n"
    },
    {
      "ports": {
        "input": {
          "repo": {
            "title": "Repository",
            "type": "function"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "repo": {
            "title": "Repository",
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "Reading {{input.path}} from the {{input.branch}} branch"
      },
      "description": "Show Repository",
      "ns": "github",
      "name": "show",
      "fn": "output = [input.repo, 'show']\n"
    },
    {
      "ports": {
        "input": {
          "repo": {
            "title": "Repository",
            "type": "function"
          },
          "branch": {
            "title": "Branch",
            "type": "string",
            "default": "master"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "contents": {
            "title": "Contents",
            "type": "string"
          },
          "commit_message": {
            "title": "Commit message",
            "type": "string"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Writing {{input.path}} to the {{input.branch}} branch. [{{input.commit_message}}]"
      },
      "description": "Write File",
      "ns": "github",
      "name": "write",
      "fn": "output = [\n  input.repo,\n  'write',\n  input.branch,\n  input.path,\n  input.contents,\n  input.commit_message\n]\n"
    }
  ],
  "twigs": []
}